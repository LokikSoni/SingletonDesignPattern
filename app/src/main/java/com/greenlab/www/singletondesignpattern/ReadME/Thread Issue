Que:- What is the purpose of Singleton?
Ans:- A Singleton class is a class which ensure that only one object(instance) will be created for that class at a time which will
      be used in whole application.


**-----------------------------Singleton design pattern with Lazy Instantiation in a single-threaded environment----------------------------------**

**Steps required to make Singleton Design Pattern**
Step 1: Create a global instance
 /*
    TODO:- make the instance private, so that it can't be accessed directly and can be accessed only by getInstance() method
    TODO:- make the instance static, so that it can be returned by a static method i.e getInstance() method
     */

Step 2: Create the constructor
  /*
       TODO:- make the constructor private,to avoid creating of Singleton object from any other class using new operator i.e new SingletonWithLazyInitialization()
       TODO:- And force them to use getInstance() method to create Singleton object only once and use them in whole application.
     */

Step 3: Create the getInstance() method
  /*
    TODO:- make the getInstance() method public, so that it can be accessed from anywhere
    TODO:- make the getInstance() method static, so that it can be accessed without creating Singleton object
     */

#-------------------------------------------------------Example---------------------------------------------------------

class Singleton {

// Step 1:
    private static Singleton singleton;

// Step 2:
    private Singleton(){
    }

// Step 3:
    public static Singleton getInstance(){
        if(singleton==null){
          singleton= new Singleton();
        }
        return singleton;
    }
}

-------------------------------------------------How it works-------------------------------------------------
This getInstance() method will check if there is any instance of that class is already created?
If yes, then our method (getInstance()) will return that old instance and if not then it creates a new instance of the singleton class in JVM and returns that instance.
Note:- The Singleton instance is not created until we call getInstance() method.
This is called lazy instantiation.

------------------------------------------------Problem--------------------------------------------------------
In the above example if two or more threads calls the getInstance() method at same time,
then singleton==null condition will be true for both the thread. So, two different instances
of the same class will be created.That will break the singleton principle.
That means our singleton class is not Thread safe.

------------------------------------------------Solution----------------------------------------------------------
**To overcome this problem, we need to create getInstance() method synchronized**

Synchronized method allows only one thread to run at a time.
When Thread 1 access synchronized method it acquires the lock.
Now the thread 2 has to wait till Thread 1 comes out of the synchronized method and releases the lock.
Now after releasing the lock by thread 1 the thread 2 find that object is already created so it will
return object created by thread 1
That means our singleton class is now Thread safe.


**------------------------------Singleton design pattern with Lazy Instantiation in a multi-threaded environment----------------------------**

**Steps required to make Singleton Design Pattern**
Step 1: Same as above
Step 2: Same as above
Step 3: Create the getInstance() method
  /*
    TODO:- make the getInstance() method public, so that it can be accessed from anywhere
     TODO:- make the getInstance() method  synchronized, so that it can be accessed by only one thread at a time to avoid creation of multi object
    TODO:- make the getInstance() method static, so that it can be accessed without creating Singleton object
     */

#-------------------------------------------------------Example---------------------------------------------------------
public class SingletonInMultiThread{
// Step 1:
    private static Singleton singleton;

// Step 2:
    private Singleton(){
    }

// Step 3:
    public synchronized static Singleton getInstance(){
        if(singleton==null){
          singleton= new Singleton();
        }
        return singleton;
    }
}

------------------------------------------------Problem--------------------------------------------------------
As we know only one Thread can enter synchronised block at a time.
So in the above example if two or more Threads calls the getInstance() method at same time,
then only one Thread at a time can access the getInstance() method another Thread 2 has to wait until one
Thread 1 complete it work and releases the lock.which result into following issue:--

*Slow performance because whether the Instance is null or not,
the Thread has to wait.It’s a waste of time for Threads when (Instance!=null)
*Unnecessary synchronization that is not required once the object is initialized.

------------------------------------------------Solution------------------------------------------------------
**We can overcome this issue if we use Double check locking method to create the singleton**

Thread 1 and Thread 2 enters the getInstance() method in paralleled.They find instance variable is null(instance==null) at first time.
Now Thread 1 and Thread 2 try to enters the synchronised block.But as we know only one thread can enter synchronised block at a time.
So Consider Thread 1 has entered the synchronised block and acquires the lock.
If no thread has passed the synchronized block earlier, the instance variable is null (instance==null).
Then Thread 1 create the new instance.
At that time Thread 2 also trying to entering the synchronized block.Since Thread 1 has acquired the lock,
Thread 2 waits till Thread 1 completes it’s execution and releases the lock.
When Thread 1 releases the lock.
Thread 2 enters Synchronized block.
Now Thread 2 finds Thread 1 has already create the new instance. So instance variable for Thread 2 is not null (instance!=null).
So,Thread 2 does not enter into if(instance==null) block and get the same instance as created by Thread 1.



---------------------------------Singleton design pattern in a multi-threaded environment using Double-checked locking – DCL----------------------------

**Steps required to make Singleton Design Pattern**
Step 1: Create a global instance
 /*
    TODO:- make the instance private, so that it can't be accessed directly and can be accessed only by getInstance() method
    TODO:- make the instance static, so that it can be returned by a static method i.e getInstance() method
     TODO:- make the instance volatile, so that changes made by one thread to shared data are visible to other threads.

      if we write to a variable in one thread it is not guaranteed to be visible to other thread,
      so If you are writing to a volatile variable then the value will be visible to other thread immediately.
     */

Step 2: Same as above

Step 3: Create the getInstance() method
  /*
    TODO:- make the getInstance() method public, so that it can be accessed from anywhere
    TODO:- make the getInstance() method static, so that it can be accessed without creating Singleton object
    TODO:- use the Double-checked locking inside getInstance() method
     */

#-------------------------------------------------------Example---------------------------------------------------------

class SingletonDesignPatternWithDCL {
// Step 1:
    private static volatile SingletonDesignPatternWithDCL singletonDCL;

    // Step 2:
    private SingletonDesignPatternWithDCL() {
    }

    // Step 3:
    public static  SingletonDesignPatternWithDCL getInstance() {

        // double-checking lock
        if(singletonDCL==null){
            // synchronized block
            synchronized (SingletonDesignPatternWithDCL.class){
                if(singletonDCL==null){
                    singletonDCL = new SingletonDesignPatternWithDCL();
                }
            }
        }
        return singletonDCL;
    }
}


#Where we use Singleton Design Pattern.
Database Connection
This FirebaseDatabase uses a Singleton
FirebaseDatabase.getInstance() ex of singleton
